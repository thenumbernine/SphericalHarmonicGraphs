#! /usr/bin/env rua
local gl = require 'gl'
local vec3d = require 'vec-ffi.vec3d'
local sphericalHarmonics = require 'sphericalharmonics'
local glCallOrRun = require 'gl.call'

local lmax = tonumber(arg[1]) or 3

local idiv = 360
local jdiv = 180

local SHApp = require 'glapp.orbit'():subclass()

SHApp.title = 'Spherical Harmonics Graph'
SHApp.viewDist = lmax

SHApp.initGL = [:] do
	gl.glEnable(gl.GL_DEPTH_TEST)
	gl.glEnable(gl.GL_COLOR_MATERIAL)
	gl.glColorMaterial(gl.GL_FRONT_AND_BACK, gl.GL_DIFFUSE)
	gl.glEnable(gl.GL_LIGHTING)
	gl.glEnable(gl.GL_LIGHT0)
end

local vtx
do
	local cache = {}
	vtx = [l,m,i,j]
			cache ?[l]={} ?[m]={} ?[i]={} ?[j]
			=	([phi, theta] 
					(([Y]
						(([r]
							{
								Y = Y,
								vec=vec3d(
									r * math.sin(theta) * math.cos(phi),
									r * math.sin(theta) * math.sin(phi),
									r * math.cos(theta)
								),
							}
						)(math.abs(Y)))
					)(sphericalHarmonics.real(l, m, theta, phi)))
				)(i/idiv*2*math.pi, j/jdiv*math.pi)
end

local normal
do
	local cache = {}
	normal = [l,m,i,j] cache ?[l]={} ?[m]={} ?[i]={} ?[j]
		=	-(vec3d(vtx(l,m,i+1,j).vec) - vec3d(vtx(l,m,i-1,j).vec))
			:cross(vec3d(vtx(l,m,i,j+1).vec) - vec3d(vtx(l,m,i,j-1).vec))
			:normalize()
end

local list = {}
SHApp.update = [:] do
	SHApp.super.update(self)
	gl.glClear(gl.GL_COLOR_BUFFER_BIT | gl.GL_DEPTH_BUFFER_BIT)

	glCallOrRun(list, [] do
		for l=0,lmax do
			for m=-l,l do
				print('building l='..l..' m='..m)
				gl.glPushMatrix()
				gl.glTranslatef(m,lmax/2-l,0)
				--gl.glPolygonMode(gl.GL_FRONT_AND_BACK, gl.GL_LINE)
				for i=0,idiv-1 do
					gl.glBegin(gl.GL_TRIANGLE_STRIP)
					for j=0,jdiv do
						for iofs=0,1 do
							local vsrc = vtx(l,m,i+iofs,j)
							if vsrc.Y >= 0 then
								gl.glColor3f(1,0,0)
							else
								gl.glColor3f(0,1,1)
							end
							gl.glNormal3f(normal(l,m,i+iofs,j):unpack())
							gl.glVertex3f(vsrc.vec:unpack())
						end
					end
					gl.glEnd()
				end
				gl.glPopMatrix()
			end
		end
	end)
end

return SHApp():run()
